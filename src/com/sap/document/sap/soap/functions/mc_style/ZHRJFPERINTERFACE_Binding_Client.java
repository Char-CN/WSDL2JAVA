
package com.sap.document.sap.soap.functions.mc_style;

import java.io.BufferedReader;
import java.io.FileReader;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;

import javax.xml.namespace.QName;
import javax.xml.ws.Holder;


/**
 * Please modify this class to meet your needs
 * This class is not complete
 */
import java.io.File;
import java.io.FileWriter;

/**
 * This class was generated by Apache CXF 3.1.6 2016-04-08T14:38:06.585+08:00
 * Generated source version: 3.1.6
 * 
 */
public final class ZHRJFPERINTERFACE_Binding_Client {

	private static final QName SERVICE_NAME = new QName("urn:sap-com:document:sap:soap:functions:mc-style", "service");

	private ZHRJFPERINTERFACE_Binding_Client() {
	}

	@SuppressWarnings("resource")
	public static void main(String args[]) throws java.lang.Exception {
		long begin = System.currentTimeMillis();
		String imDate = "2016-04-08";
		String imDays = "8";
		String fName = null;
		if (args.length >= 1) {
			imDate = args[0];
			if (imDate.indexOf("-") == -1) {
				System.out.println("日期格式不对，必须是：yyyy-MM-dd格式.");
				System.exit(-1);
			}
		}
		if (args.length >= 2) {
			imDays = args[1];
		}
		if (args.length >= 3) {
			fName = args[2];
		} else {
			fName = SourceUtil.root + "emp_" + imDate + "_" + imDays + ".csv";
		}

		URL wsdlURL = Service.WSDL_LOCATION;

		Service ss = new Service(wsdlURL, SERVICE_NAME);
		ZHRJFPERINTERFACE port = ss.getBinding();

		// personnel_areas organization secondary_dimension primary_dimension
		HashMap<String, String[]> map = new HashMap<String, String[]>();
		{
			println("开始加载employee.csv...");
			long l1 = System.currentTimeMillis();
			try {
				BufferedReader br = new BufferedReader(new FileReader(SourceUtil.resource + "employee.csv"));
				String s = br.readLine();// 过滤第一条数据
				while ((s = br.readLine()) != null) {
					String[] strs = s.split("\t");
					if (strs.length < 4) {
						continue;
					}
					map.put(strs[0] + strs[1], strs);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			long l2 = System.currentTimeMillis();
			println("加载employee.csv [" + map.size() + "] 条记录,消耗时间:" + (l2 - l1) + "毫秒");
		}

		TableOfZshrJfpernr jfpernr = new TableOfZshrJfpernr();
		Holder<TableOfZshrJfpernr> rst = new Holder<TableOfZshrJfpernr>(jfpernr);
		{
			println("开始调用webservice接口...");
			long l1 = System.currentTimeMillis();
			TableOfZhrsHtPernr htPernr = new TableOfZhrsHtPernr();
			Holder<TableOfZhrsHtPernr> holder = new Holder<TableOfZhrsHtPernr>(htPernr);
			port.zdefmHrJfper(rst, imDate, imDays, holder);

			if (rst == null || rst.value == null || rst.value.item == null) {
				System.err.println("错误 : rst == null");
				System.exit(-1);
			}
			if (rst.value == null) {
				System.err.println("错误 : rst.value == null");
				System.exit(-1);
			}
			if (rst.value.item == null) {
				System.err.println("错误 : rst.value.item == null");
				System.exit(-1);
			}
			long l2 = System.currentTimeMillis();
			println("调用接口获取[" + rst.value.item.size() + "]条数据,消耗时间:" + (l2 - l1) + "毫秒");
		}

		File f = new File(fName);
		FileWriter fw = new FileWriter(f);
		{
			println("开始处理每条数据,并且写入文件[" + fName + "]...");
			long l1 = System.currentTimeMillis();
			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < rst.value.item.size(); i++) {
				sb.setLength(0);
				ZshrJfpernr z = rst.value.item.get(i);
				z.clearChar();
				sb.append(z.toString());
				if (map.containsKey(z.name1 + z.orgtx)) {
					String[] strs = map.get(z.name1 + z.orgtx);
					sb.append(ZshrJfpernr.DILIMITER);
					sb.append(strs[2]);
					sb.append(ZshrJfpernr.DILIMITER);
					sb.append(strs[3]);
				} else {
					sb.append(ZshrJfpernr.DILIMITER);
					sb.append("新增_匹配未知");
					sb.append(ZshrJfpernr.DILIMITER);
					sb.append("新增_匹配未知");
				}
				sb.append("\n");
				fw.write(sb.toString());
			}
			try {
				fw.flush();
				fw.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
			long l2 = System.currentTimeMillis();
			println("处理[" + rst.value.item.size() + "]条数据,消耗时间:" + (l2 - l1) + "毫秒");
		}
		long end = System.currentTimeMillis();
		println("总耗时 : " + (end - begin) + "毫秒");
		System.exit(0);
	}

	static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss : ");
	static SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd_HHmmss_SSS");

	private static String now() {
		return sdf.format(new Date());
	}

	@SuppressWarnings("unused")
	private static String nowFileName() {
		return sdf2.format(new Date());
	}

	private static void println(String... strs) {
		StringBuilder sb = new StringBuilder();
		for (String s : strs) {
			sb.append(s);
		}
		System.out.println(now() + sb);
	}

}
